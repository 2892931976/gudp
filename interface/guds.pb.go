// Code generated by protoc-gen-go. DO NOT EDIT.
// source: guds.proto

/*
Package guds is a generated protocol buffer package.

It is generated from these files:
	guds.proto

It has these top-level messages:
	RowData
	ParamsGroup
	Query
	Response
*/
package guds

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RowData struct {
	Fields map[string]string `protobuf:"bytes,1,rep,name=Fields" json:"Fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RowData) Reset()                    { *m = RowData{} }
func (m *RowData) String() string            { return proto.CompactTextString(m) }
func (*RowData) ProtoMessage()               {}
func (*RowData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RowData) GetFields() map[string]string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ParamsGroup struct {
	Params map[string]string `protobuf:"bytes,1,rep,name=Params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ParamsGroup) Reset()                    { *m = ParamsGroup{} }
func (m *ParamsGroup) String() string            { return proto.CompactTextString(m) }
func (*ParamsGroup) ProtoMessage()               {}
func (*ParamsGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ParamsGroup) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type Query struct {
	Engine string            `protobuf:"bytes,1,opt,name=Engine" json:"Engine,omitempty"`
	Ident  string            `protobuf:"bytes,2,opt,name=Ident" json:"Ident,omitempty"`
	Opt    string            `protobuf:"bytes,3,opt,name=Opt" json:"Opt,omitempty"`
	Params map[string]string `protobuf:"bytes,4,rep,name=Params" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Group  []*ParamsGroup    `protobuf:"bytes,5,rep,name=Group" json:"Group,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Query) GetEngine() string {
	if m != nil {
		return m.Engine
	}
	return ""
}

func (m *Query) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *Query) GetOpt() string {
	if m != nil {
		return m.Opt
	}
	return ""
}

func (m *Query) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Query) GetGroup() []*ParamsGroup {
	if m != nil {
		return m.Group
	}
	return nil
}

type Response struct {
	Count uint32     `protobuf:"varint,1,opt,name=Count" json:"Count,omitempty"`
	Rows  []*RowData `protobuf:"bytes,2,rep,name=Rows" json:"Rows,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Response) GetRows() []*RowData {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*RowData)(nil), "guds.RowData")
	proto.RegisterType((*ParamsGroup)(nil), "guds.ParamsGroup")
	proto.RegisterType((*Query)(nil), "guds.Query")
	proto.RegisterType((*Response)(nil), "guds.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UnifiedData service

type UnifiedDataClient interface {
	DBCommit(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
}

type unifiedDataClient struct {
	cc *grpc.ClientConn
}

func NewUnifiedDataClient(cc *grpc.ClientConn) UnifiedDataClient {
	return &unifiedDataClient{cc}
}

func (c *unifiedDataClient) DBCommit(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/guds.UnifiedData/DBCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UnifiedData service

type UnifiedDataServer interface {
	DBCommit(context.Context, *Query) (*Response, error)
}

func RegisterUnifiedDataServer(s *grpc.Server, srv UnifiedDataServer) {
	s.RegisterService(&_UnifiedData_serviceDesc, srv)
}

func _UnifiedData_DBCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifiedDataServer).DBCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guds.UnifiedData/DBCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifiedDataServer).DBCommit(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnifiedData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guds.UnifiedData",
	HandlerType: (*UnifiedDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DBCommit",
			Handler:    _UnifiedData_DBCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guds.proto",
}

func init() { proto.RegisterFile("guds.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x41, 0x4b, 0xf3, 0x40,
	0x14, 0xfc, 0xd2, 0x26, 0xf9, 0xea, 0x0b, 0x15, 0x5d, 0x44, 0xd7, 0x82, 0x50, 0x73, 0xb1, 0x5e,
	0x22, 0x56, 0x84, 0xea, 0xd1, 0xb4, 0x8a, 0xa7, 0xea, 0x82, 0x3f, 0x20, 0x92, 0xb5, 0x04, 0x9b,
	0xdd, 0x90, 0xdd, 0x18, 0x72, 0xf2, 0x8f, 0xfa, 0x63, 0x24, 0x6f, 0x57, 0x89, 0xe8, 0x45, 0xbc,
	0xbd, 0x79, 0x6f, 0x26, 0x33, 0x43, 0x16, 0x60, 0x55, 0xa5, 0x2a, 0x2a, 0x4a, 0xa9, 0x25, 0x71,
	0xdb, 0x39, 0xac, 0xe1, 0x3f, 0x93, 0xf5, 0x3c, 0xd1, 0x09, 0x39, 0x05, 0xff, 0x3a, 0xe3, 0xeb,
	0x54, 0x51, 0x67, 0xdc, 0x9f, 0x04, 0xd3, 0xfd, 0x08, 0xd9, 0xf6, 0x1c, 0x99, 0xdb, 0x42, 0xe8,
	0xb2, 0x61, 0x96, 0x38, 0xba, 0x80, 0xa0, 0xb3, 0x26, 0x5b, 0xd0, 0x7f, 0xe6, 0x0d, 0x75, 0xc6,
	0xce, 0x64, 0x83, 0xb5, 0x23, 0xd9, 0x01, 0xef, 0x25, 0x59, 0x57, 0x9c, 0xf6, 0x70, 0x67, 0xc0,
	0x65, 0x6f, 0xe6, 0x84, 0xaf, 0x10, 0xdc, 0x25, 0x65, 0x92, 0xab, 0x9b, 0x52, 0x56, 0x05, 0x39,
	0x07, 0xdf, 0x40, 0x6b, 0x7e, 0x60, 0xcc, 0x3b, 0x14, 0x3b, 0xdb, 0x00, 0x06, 0xb4, 0x01, 0x3a,
	0xeb, 0x5f, 0x05, 0x78, 0x73, 0xc0, 0xbb, 0xaf, 0x78, 0xd9, 0x90, 0x5d, 0xf0, 0x17, 0x62, 0x95,
	0x09, 0x6e, 0x85, 0x16, 0xb5, 0xda, 0xdb, 0x94, 0x0b, 0xfd, 0xa1, 0x45, 0xd0, 0x7a, 0x2c, 0x0b,
	0x4d, 0xfb, 0xc6, 0x63, 0x59, 0x68, 0x72, 0xf2, 0x99, 0xdd, 0xc5, 0xec, 0x7b, 0x26, 0x3b, 0x7e,
	0xfc, 0xa7, 0xd4, 0xe4, 0x08, 0x3c, 0xac, 0x44, 0x3d, 0xe4, 0x6f, 0x7f, 0xeb, 0xca, 0xcc, 0xfd,
	0x2f, 0xf5, 0x62, 0x18, 0x30, 0xae, 0x0a, 0x29, 0x14, 0x16, 0x89, 0x65, 0x25, 0x34, 0x2a, 0x87,
	0xcc, 0x00, 0x72, 0x08, 0x2e, 0x93, 0xb5, 0xa2, 0x3d, 0x0c, 0x31, 0xfc, 0xf2, 0xb7, 0x19, 0x9e,
	0xa6, 0x33, 0x08, 0x1e, 0x44, 0xf6, 0x94, 0xf1, 0x14, 0x5f, 0xc8, 0x31, 0x0c, 0xe6, 0x57, 0xb1,
	0xcc, 0xf3, 0x4c, 0x93, 0xa0, 0x53, 0x72, 0xb4, 0x69, 0xc5, 0xd6, 0x30, 0xfc, 0xf7, 0xe8, 0xe3,
	0x23, 0x3b, 0x7b, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x10, 0xbc, 0xa8, 0xc4, 0x72, 0x02, 0x00, 0x00,
}
